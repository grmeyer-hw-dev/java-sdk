name: Java SDK CI

on:
  workflow_dispatch:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build:
    # Compile the project using the predefined JDK versions in the strategy section
    runs-on: ubuntu-latest
    name: Build

    strategy:
      fail-fast: false
      matrix:
        java: [ 8 ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}

      - name: Build and Test JDK ${{ matrix.java }}
        #  --batch-mode  Run in non-interactive (batch) mode (disables output color)
        #  --update-snapshots  Forces a check for missing releases and updated snapshots on remote repositories
        run: mvn --batch-mode --update-snapshots compile

  test:
    # Perform the unit and integration tests using the predefined JDK versions in the strategy section
    needs: [build]
    runs-on: ubuntu-latest
    name: Test on JDK ${{ matrix.java }}

    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 11, 14, 18 ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}

      - name: Run the Maven test phase JDK ${{ matrix.java }}
        #  --batch-mode  Run in non-interactive (batch) mode (disables output color)
        #  --update-snapshots  Forces a check for missing releases and updated snapshots on remote repositories
        run: mvn --batch-mode --update-snapshots test

  publish:
    # Deploy new JAR Version on ossrh when a new tag is pushed
    needs: [build, test, documentation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with:  # running setup-java again overwrites the settings.xml
          distribution: 'zulu'
          java-version: 8
          cache: maven
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: OSSRH_USERNAME # env variable for username in deploy
          server-password: OSSRH_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn deploy
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
